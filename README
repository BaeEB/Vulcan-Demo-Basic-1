      _                   _
  ___| |__   _____      _(_)_ __   __ _
 / __| '_ \ / _ \ \ /\ / / | '_ \ / _` |
| (__| | | |  __/\ V  V /| | | | | (_| |
 \___|_| |_|\___| \_/\_/ |_|_| |_|\__, |
                                  |___/

libchewing - The intelligent phonetic input method library
  http://chewing.csie.net/

[-] Summary

The Chewing (酷音) input method is an intelligent phonetic (Zhuyin/Bopomofo)
input method. It is one of the most popular input methods among Traditional
Chinese users.  Chewing was inspired by other proprietary intelligent Zhuyin
input methods under Microsoft Windows, namely, Wang-Xin by Eten, Microsoft New
Zhuyin, and Nature Zhuyin.

The Chewing core team extended their work and actively maintains the project
as full open source efforts.


[-] History

libchewing is derived from Chewing input method, a xcin module focusing on
intelligent phonetic (Bopomofo/Zhuyin) processing by Lu-chuan Kung (lckung)
and Kang-pen Chen (kpchen) sponsored by Tsan-sheng Hsu from Academia Sinica
during 1999-2001.  However, the original authors of Chewing dropped its
development, and Chewing was highly coupled with xcin, which prevents from
comprehensive applications.  There was a similar input method, bimsphone,
which was bundled in XCIN server. However, it did not provide a convenient
API for further development, either.


[-] Motivation

Jim Huang, et al. formed the Chewing core team and extended Kung and Chen's
work since 2002.  The chewing core team renamed the project as "new" chewing
to differentiate their work from the original.  Nevertheless, the English name
has remained "chewing", which is identified by various input method framework
as well.

In 2004, Chewing core team successfully ported the input method to several
platforms and framework along with community collaboration.


[-] Development Goal of libchewing

- Split logic and view.
- Support multiple operating systems, and input framework.
- Provide a universal API for input framework and further development.


[-] Status

1. System bridge integration

Chewing has been adopted by various input frameworks in Unix-like systems and
even Microsoft Windows.  On these systems, the chewing package is usually
split into two parts: libchewing, which handles the actual character selection
logic; and input framework interface for display and preference setting.

The active integration:
  - JMCCE
  - SCIM
  - standalone Microsoft Windows 32/64-bit (windows-chewing)
  - OXIM
  - UIM
  - ibus
  - UCIMF
  - mozc
  - gcin/HIME
  - fcitx

The inactive one:
  - xcin
  - IIIMF
  - MacOS X (SpaceChewing)
  - Sun's Java Desktop System Input Method Framework
  - OpenVanilla Input Method Framework (previous than version 1.0)
  - OXIM

2. support phonetic keyboard layout
  - Hsu
  - IBM
  - Gin-Yieh
  - Eten
  - Eten 26 keys
  - Dvorak
  - Dvorak Hsu
  - HanYu PinYin


[-] Installation

# ./configure --prefix=/usr
  (If you checkout from GIT, make sure running ./autogen.sh
   before this.)
# make
# make install

see "INSTALL" for details.


[-] Cross-build

Example cross-build instructions:
# CC=arm-none-linux-gnueabi-gcc ./configure \
    --host=arm-none-linux-gnueabi \
    --disable-shared --enable-static
# make CC_FOR_BUILD=gcc


[-] Build on Windows with MinGW

To build libchewing on Windows, you need to setup MinGW and MSYS in your
system. The installer of MinGW and MSYS is in the following link:

http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/

In "Select Components" during installing, please select the following items:

- MinGW Compiler Suite -> C Compiler
- MSYS Basic System

After installing, execute <MinGW directory>\msys\1.0\msys.bat (default is
C:\MinGW\msys\1.0\msys.bat) to enter MSYS shell.

If you get the source from the git repository you need additional step
to make the source buildable; use the following commands to install
necessary packages.

- mingw-get install automake
- mingw-get install autoconf
- mingw-get install libtool

Now you have the build environment for libchewing. However, you need to check
the line end of source code is LF instead of CR/LF before running autogen.sh.
The easily way to do this is using git:

- git config core.autocrlf input
- rm -rf *
- git reset --hard

Now you can run the following commands in MSYS shell to build libchewing:

If you get the source from the git repository, run:

- autogen.sh

Then

- configure
- make

If you run testchewing.exe (available after `make check') you will
find that testchewing.exe cannot print the correct string. This is
because testchewing.exe prints the UTF-8 string, while Windows cannot
print it to console.


[-] License

See "COPYING" for details.


[-] Authors & Contact Information

See "AUTHORS" for details.
